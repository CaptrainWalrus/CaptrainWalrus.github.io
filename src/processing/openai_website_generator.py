#!/usr/bin/env python3
"""
Let OpenAI generate the entire website from raw session logs
No static coding - OpenAI does all organization, categorization, and HTML generation
"""

import os
import json
import urllib.request
import urllib.error
from pathlib import Path

def load_api_key():
    """Load API key from .env file"""
    env_file = '.env'
    if os.path.exists(env_file):
        with open(env_file, 'r') as f:
            for line in f:
                if line.startswith('OPENAI_API_KEY='):
                    return line.split('=', 1)[1].strip()
    
    api_key = os.getenv('OPENAI_API_KEY')
    if not api_key:
        raise Exception("No OpenAI API key found")
    return api_key

def make_openai_request(prompt, max_tokens=4000):
    """Make a request to OpenAI API"""
    api_key = load_api_key()
    
    headers = {
        'Content-Type': 'application/json',
        'Authorization': f'Bearer {api_key}'
    }
    
    data = {
        "model": "gpt-4",
        "messages": [{"role": "user", "content": prompt}],
        "temperature": 0.3,
        "max_tokens": max_tokens
    }
    
    req = urllib.request.Request(
        "https://api.openai.com/v1/chat/completions",
        data=json.dumps(data).encode('utf-8'),
        headers=headers,
        method='POST'
    )
    
    try:
        with urllib.request.urlopen(req, timeout=60) as response:
            result = json.loads(response.read().decode('utf-8'))
            return result['choices'][0]['message']['content']
    except Exception as e:
        print(f"‚ùå OpenAI request failed: {e}")
        raise

def generate_website_with_openai():
    """Let OpenAI generate the entire website"""
    
    # Load raw session logs
    session_log = Path("session-logs/claude_memory.md")
    if not session_log.exists():
        print("‚ùå No session logs found")
        return
    
    with open(session_log, 'r', encoding='utf-8') as f:
        raw_content = f.read()
    
    print("üîÑ Asking OpenAI to generate the complete website...")
    
    prompt = f"""You are building a developer's personal website called "I just want to build" from their session logs.

USER REQUIREMENTS:
1. Organize content by priority: New/big plans ‚Üí Features ‚Üí Changes ‚Üí Fixes/bugs (at bottom)
2. Process the ENTIRE log (all entries)
3. Add scrollbars for long content
4. Two-column layout: NT_OrderManager (left) and FluidJournal (right)
5. Fixed header with GitHub avatar centered
6. Natural, conversational descriptions (not robotic)

DESIGN REQUIREMENTS:
- Dark GitHub theme (#0d1117 background, #161b22 cards)
- Header: Fixed with avatar https://avatars.githubusercontent.com/u/2623736?s=400&u=e7f8d6597d1d222a1f038ed316af1e439c3a57b4&v=4
- Banner: "I just want to build" 
- Two columns with scrollable content (80vh height)
- Color-coded categories: Plans (purple), Features (green), Changes (blue), Fixes (red)
- Priority badges (HIGH/MEDIUM/LOW)
- Tech stack footer

PROJECT CATEGORIZATION:
- NT_OrderManager: NinjaTrader, trading, strategies, signals, order management
- FluidJournal: Agentic memory, storage, risk agents, LanceDB, machine learning

Generate a complete HTML file. Process ALL the session log entries below and organize them intelligently.

SESSION LOGS:
{raw_content}

Return ONLY the complete HTML - no explanations, no markdown blocks."""

    try:
        html_content = make_openai_request(prompt, max_tokens=8000)
        
        # Write to index.html
        output_path = Path("index.html")
        with open(output_path, 'w', encoding='utf-8') as f:
            f.write(html_content)
        
        print(f"‚úÖ Website generated by OpenAI at {output_path}")
        print("ü§ñ OpenAI handled all organization, categorization, and HTML generation")
        
    except Exception as e:
        print(f"‚ùå Failed to generate website: {e}")

if __name__ == "__main__":
    generate_website_with_openai()